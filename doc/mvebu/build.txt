Build instructions:
-------------------

This document describes how to compile the U-Boot and how to change U-Boot configuration

Note: <DVUBR> - U-Boot vanila version.
      <MVUBR> - Marvell release.

Build Instruction:
------------------

1. Download the U-Boot release <DVUBR> from ftp://ftp.denx.de/pub/u-boot/u-boot-2015.01.tar.bz2
2. Extract the U-boot vanilla tree with the Marvell source:
	2.1. Extract the U-Boot source code:
		# tar -xjf u-boot-<DVUBR>.tar.bz2
		# mv u-boot-<DVUBR> u-boot-<DVUBR>-<MVUBR>
	2.2. Add Marvell code:
	- Option 1: Extracting the release zip file over the vanilla tree:
		 Extract the U-boot-<DVUBR>-<MVUBR>.zip release file.
		# Unzip u-boot-<DVUBR>-<MVUBR>.zip
		For example: Unzip u-boot-2015.01-2015_T3.0.eng_drop_v6.zip.
		This overrides part of the U-Boot source files and adds the relevant Marvell files.
		 When asked whether to replace a certain file, choose 'A' for all files that have such a conflict.
	- Option 2: Patch update:
		 Extract the git-<DVUBR>-<MVUBR>.zip to the destination folder u-boot-<DVUBR>-<MVUBR>.
		 Run the following git command in the u-boot-<DVUBR>-<MVUBR> folder:
		 git apply git-<DVUBR>-<MVUBR>/*.patch
3. Change directory 'cd' to the U-Boot directory.
4. Set the cross compiler:
	# export CROSS_COMPILE=/path/to/toolchain/aarch64-marvell-linux-gnu-
5. Clean-up old residuals:
	# make mrproper
6. Configure the U-Boot:
	# make <defconfig_file>
	For AP806 stand-alone board use "make mvebu_apn806_defconfig"
	For the Armada-8040-RZ board use "make mvebu_armada70x0_rz_defconfig"
	For the Armada-70x0 board use "make mvebu_armada70x0_defconfig"
	For the Armada-3700 board use "make mvebu_armada3700_defconfig"
7. Build the U-Boot (Armada-3700 builds required WTP tools installation -
   Refer to the section "Tools installation for Armada-3700 builds"):
	# make
	The U-Boot compilation generate:
	u-boot.bin - U-Boot image

Please Note:
------------
	The u-boot.bin should not be used as a stand-alone image.
	The ARM Trusted Firmware (ATF) build process uses this image to generate the
	flash image.

Configuration update:
---------------------
	To update the U-Boot configuration, please refer to doc/README.kconfig

Boot device selection note for Armada-3700 builds:
--------------------------------------------------
	eMMC boot device:
	-----------------
	The Armada-3700 supports eMMC as the boot device on the target.
	The default boot device on this platform is SPI NOR flash.
	In order to change the boot device to eMMC, set the following parameter
	the default configuration:
	CONFIG_MVEBU_MMC_BOOT=y
	If "menuconfig" is used, navigate to the following location:
	-> Marvell Platform Options
	  -> Flash for image
	and select "eMMC flash boot".
	The eMMC has 2 boot partitions (BOOT0 and BOOT1) and a user data partition (DATA).
	The boot partitions are numbered as partition 1 and 2 in MMC driver.
	Number 0 is used for user data partition and should not be utilized for storing
	boot images and U-Boot environment in RAW mode since it will break file system
	structures usually located here.
	The default boot partition is BOOT0. It is selected by the following parameter:
	CONFIG_SYS_MMC_ENV_PART=1
	Valid values for this parameter are 1 for BOOT0 and 2 for BOOT1.
	Please never use partition number 0 here!
	It can be changed in the "menuconfig" location:
	-> Marvell Platform Options
	  -> eMMC Boot Partition
	Please note that this configuration is only available when "Flash for image"
	selects "eMMC flash boot" device as described above.
	The selected partition will be used by U-Boot "bubt" and "savenv" commands
	for flashing the boot image and saving U-Boot configuration.
	The boot partition can be written from Linux command line using the following
	commands:
	# sudo echo 0 > /sys/block/mmcblk0boot0/force_ro
	# sudo dd if=u-boot-spl.img of=/dev/mmcblk0boot0
	The first commands remove the write protection flag from the boot partition 0.
	The same operation can be done for BOOT1 partition by replacing the partition
	ID in the above commands from mmcblk0boot0 to mmcblk0boot1.


	SATA boot device:
	-----------------
	The Armada-3700 supports SATA as the boot device on the target.
	In order to change the boot device to SATA, set the following parameter
	the default configuration:
	CONFIG_MVEBU_SATA_BOOT=y
	If "menuconfig" is used, navigate to the following location:
	-> Marvell Platform Options
	  -> Flash for image
	and select "SATA device boot".
	The SATA boot image uses FAT partition for storing the U-Boot environment.
	The internal BootROM looks for a special partition in order to load U-Boot binary.
	So normally 2 partitions are required for using the SATA boot option.
	The boot partition has to have ID 0x4D, or ASCII "M". The environment partition can
	be FAT32 with ID 0xB. In order to change the default environment partition location
	and number, please change the value of FAT_ENV_DEVICE_AND_PART constant defined
	in mvebu-common.h file. The default value of this constant assumes that environment
	stored on SATA device 0, partition number 2 (the boot image itself is stored on
	partition number 1).
	Follow the BootROM manual for details about GPT boot partition selection.
	Partitioning example for 500GB hard disk using MBR scheme:
	Part    Start Sector    Num Sectors     UUID            Type
	1       4096            524288          9c1661a5-01     4d
	2       528384          524288          9c1661a5-02     0b
	3       1052672         975720496       9c1661a5-03     83
	Using the example above, the boot image can be placed into the boot partition using
	the following Linux command (assuming that SATA device is /dev/sda)
	# sudo dd if=u-boot-spl.img of=/dev/sda1

	Special note:
	-------------
	A3700 Z0 BootROM does not support SATA SERDES lines polarity swap. Therefore the A3700 DB
	equipped with this SoC cannot be used for directly booting from SATA device without
	board modification (the board has reverse polarity on SATA TX line).
	Future A3700 revisions will include a special eFuse fields for instructing the BootROM
	to swap polarity on SATA RX and/or TX lines.


Tools installation for Armada-3700 builds:
------------------------------------------
1. Extract the tools/wtp/WTPTP_TOOLS_x_x_xx.zip into a temporary directory

   # cd tools/wtp
   # 7z x WTPTP_TOOLS_x_x_xx.zip

2. If required, add executable permissions to files in the extracted
   WTPTP_TOOLS_x_x_xx/Linux_Tools folder:

   # sudo chmod a+x WTPTP_TOOLS_x_x_xx/Linux_Tools/*.exe

3. Copy executable files from WTPTP_TOOLS_x_x_xx/Linux_Tools
   to location pointed to $PATH environment variable.
   For instance:

   # sudo cp WTPTP_TOOLS_x_x_xx/Linux_Tools/*.exe /usr/local/bin

4. Make sure the "ntbb_linux.exe" can be executed from any
   location and the U-Boot "make" passes without error.

5. Install a cross GNU ARM tool chain for building the WTMI binary.
   Any cross GNU ARM tool chain able to build ARM Cortex M3 binaries
   is suitable.
   On Debian/Uboot hosts the default GNU ARM tool chain can be installed
   using the following command:
   # sudo apt-get install gcc-arm-linux-gnueabi
   If required, the default tool chain prefix "arm-linux-gnueabi-" can be
   overwritten using environment variable CROSS_CM3.
   Example for BASH shell:
   # export CROSS_CM3=/opt/arm-cross/bin/arm-linux-gnueabi

